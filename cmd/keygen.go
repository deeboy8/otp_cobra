/*
Copyright Â© 2023 NAME HERE <EMAIL ADDRESS>
*/
package cmd

import (
	"fmt"
	"math/rand"

	"github.com/spf13/cobra"
)

const alpha string = "ABCDEFGHIJKLMNOPQRSTUVWXYZ "

func get_rand_char(rand_val int) string {
	rand_char := alpha[rand_val : rand_val + 1]
	return rand_char
}

// generate random characters and place into buffer
func get_randomized_characters(count int) string {
	// UT --> string len as expected, only char from alphabet, ends w newline
	if count <= 0 {
		panic("error: count cannot be less than or equal to zero")
	}

	var s string 
	
	for i := 0; i < count; i++ {
		rand_val := rand.Intn(len(alpha))
		rand_char := get_rand_char(rand_val)
		s += rand_char 
	}
	s += "\n"
	
	return s
}

func keygen(plaintext_len int) {
	// obtain string of randomized chars 
	random_characters := get_randomized_characters(plaintext_len)

	// write characters to file
	// write_to_file(random_characters, "key.txt")
	fmt.Println(random_characters)
}

// keygenCmd represents the keygen command
var keygenCmd = &cobra.Command{
	Use:   "keygen",
	Short: "A brief description of your command",
	Long: `A longer description that spans multiple lines and likely contains examples
and usage of using your command. For example:

Cobra is a CLI library for Go that empowers applications.
This application is a tool to generate the needed files
to quickly create a Cobra application.`,
	Run: func(cmd *cobra.Command, args []string) {
		// fmt.Println("keygen called")
		keygen(key_count)
	},
}

var key_count int 

func init() {
	rootCmd.AddCommand(keygenCmd)

	// Here you will define your flags and configuration settings.

	// Cobra supports Persistent Flags which will work for this command
	// and all subcommands, e.g.:
	// keygenCmd.PersistentFlags().String("foo", "", "A help for foo")

	keygenCmd.PersistentFlags().IntVarP(&key_count, "count", "c", 32, "number chars to be generated by keygen")
	// Cobra supports local flags which will only run when this command
	// is called directly, e.g.:
	// keygenCmd.Flags().BoolP("toggle", "t", false, "Help message for toggle")
}
