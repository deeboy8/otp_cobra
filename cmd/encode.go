/*
Copyright Â© 2023 NAME HERE <EMAIL ADDRESS>

*/
package cmd

import (
	"fmt"

	"github.com/spf13/cobra"
)

func convert_char_to_alphabetical_index(char byte) int {
	// find char in alphabet and return index position i
	for i := 0; i < len(alpha); i++ { // can't use char -'A' because must account for ' ' 
		if char == alpha[i] { // or use strcmp() equivalent
			return i
		}
	}

	return -1
}

func get_plaintext_char_index_position_from_alpha(char byte) int {
	for i := 0; i < len(alpha); i++ { // can't use char -'A' because must account for ' ' 
		if char == alpha[i] { // or use strcmp() equivalent
			return i
		}
	}

	return -1
}

func get_key_char_index_from_alpha(char byte) int {
	for i := 0; i < len(alpha); i++ { // can't use char -'A' because must account for ' ' 
		if char == alpha[i] { // or use strcmp() equivalent
			return i
		}
	}

	return -1
}

func encode(plaintext string, key string) string {
	if len(plaintext) == 0 || len(key) == 0 {
		return "failure"
	}

	var ciphertext string
	for i := 0; i < len(plaintext); i++ { // rule: keygen has to be at least as long as message
		plaintxt_index := get_plaintext_char_index_position_from_alpha(plaintext[i])
		key_index := get_key_char_index_from_alpha(key[i])

		// check for error
		if plaintxt_index == -1 || key_index == -1 {
			fmt.Println("error finding char in 'alpha'")
			panic("error") // how to appropriately use panic
		}
		
		result := plaintxt_index + key_index

		ciphertext += string(alpha[result % len(alpha)])
	}
	fmt.Printf("ciphertext final: ~%s~\n", ciphertext)
	return ciphertext
}

// encodeCmd represents the encode command
var encodeCmd = &cobra.Command{
	Use:   "encode",
	Short: "received plaintext file and pass to encode daemon",
	Long: `A longer description that spans multiple lines and likely contains examples
and usage of using your command. For example:

Cobra is a CLI library for Go that empowers applications.
This application is a tool to generate the needed files
to quickly create a Cobra application.`,
	Run: func(cmd *cobra.Command, args []string) {
		fmt.Println("encode called")
	},
}

var plaintext string

func init() {
	rootCmd.AddCommand(encodeCmd)

	// Here you will define your flags and configuration settings.

	// Cobra supports Persistent Flags which will work for this command
	// and all subcommands, e.g.:
	// encodeCmd.PersistentFlags().String("foo", "", "A help for foo")

	encodeCmd.PersistentFlags().String(plaintext, "plaintxt", "p")   //IntVarP(&key_count, "count", "c", 32, "number chars to be generated by keygen")
	// Cobra supports local flags which will only run when this command
	// is called directly, e.g.:
	// encodeCmd.Flags().BoolP("toggle", "t", false, "Help message for toggle")
}
